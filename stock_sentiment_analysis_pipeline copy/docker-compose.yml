version: '3.8'

services:
  # Zookeeper 서비스
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - stock-network
    restart: unless-stopped

  # Kafka 서비스
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - stock-network
    restart: unless-stopped

  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stockdb
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - stock-network
    restart: unless-stopped

  # 데이터 수집기
  collector:
    build:
      context: .
      dockerfile: Dockerfile
      target: collector
    container_name: collector
    depends_on:
      - kafka
      - postgres
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DB_HOST=postgres
    volumes:
      - ./logs:/app/logs
    networks:
      - stock-network
    restart: unless-stopped

  # 데이터 처리기
  processor:
    build:
      context: .
      dockerfile: Dockerfile
      target: processor
    container_name: processor
    depends_on:
      - kafka
      - postgres
      - collector
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DB_HOST=postgres
    volumes:
      - ./logs:/app/logs
    networks:
      - stock-network
    restart: unless-stopped

  # 알림 처리기
  notifier:
    build:
      context: .
      dockerfile: Dockerfile
      target: notifier
    container_name: notifier
    depends_on:
      - kafka
      - processor
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./logs:/app/logs
    networks:
      - stock-network
    restart: unless-stopped

  # 대시보드
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: dashboard
    container_name: dashboard
    depends_on:
      - postgres
    ports:
      - "8050:8050"
    environment:
      - DB_HOST=postgres
    volumes:
      - ./logs:/app/logs
    networks:
      - stock-network
    restart: unless-stopped

volumes:
  zookeeper-data:
  kafka-data:
  postgres-data:

networks:
  stock-network:
    driver: bridge